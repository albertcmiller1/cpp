what is a pointer? 
    > a variable whose value is an address (variable hold values, pointers hold addresses)
    > that variable can be another variable or a function 
    > if x is an integer variable and its value is 10, then i can declare a pointer that points to it 
    > to use the data that the pointer is pointing to you must know its type
    > 4.cpp is a good example 

why use pointers? 
    > you shouldnt unless you have to 
    > inside functions, pointers can be used to access data that are defined outside the function. 
        > those variables may not be in scope so you cant access them by their name 

    > pointers can be used to operate on arrays very efficiently 

    > we can allocate memory dynamically on the heap or free store
        > this memory doesnt even have a variable name 
        > the only way to get to it is via a pointer 

    > with OOP, pointers are how polymorphism works

    > can access specific addresses in memory 
        > useful in emedded and systems applications 

declaring pointers
    > always initialize pointers 
    > uninitilized pointers contain garbage data and can point anywhere 
    > nullptr is a way to initialize to 'address zero'

accessing pointer address
    > & the address operator 
    > variables are stored in unique addresses 
    > unary operator 
    > evaluates to the address of its operand 
        > opperand cannot be a constand or expression that evaluates to temp values 

sizeof a pointer variable 
    > dont confuse the size of a pointer vs the size of what its pointing to 
    > all pointers in a program have the same size
    > they may be pointing to very large or small types

storing an address in a pointer variable 
    > the compiler will make sure that the address stored in a pointer variable is of the correct type 
    > see 3.cpp for an example 


dereferencing a pointer
    > access the data were pointing to 
    > can also use the * 

dynamic memory allocation 
    > allocating storage from the heap at runtime 
    > we often dont know how much storage we need until we need it 
    > we can allocate storage for a variable at runtime 
    > recall arrays 
        > need to explicity provide the size 
        > but vectors grow and shrink dynamically 
    > we can use pointers to access newly allocated heap storage 

const and pointers
    > pointers to constants 
        > the data pointed to by the pointers is constant and cannot be changed
        > the pointer itself can change and point somewhere else
    > constant pointers 
        > the data pointed to by the pointers can be changed
        > the pointer itself cannot change and point shomewhere else

    > constant pointers to consttants 
        > the data pointed to by the pointer is constant and cannot be changed
        > the pointer itself cannot change and point somewhere else


passing pointers to a function 
    > pass-by-reference with pointer parameters
    > we can use pointers and the dereference operator to achieve pass-by-reference
    > the function parameter is a pointer 
    > the actual parameter can be a pointer or address of a variable 

returning a pointer from a function
    > should return pointers to 
        > memory dynamically allocated in the function 
        > to data that was passed in 
    > never return a pointer to a local function variabl 